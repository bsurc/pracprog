Dumb Computers
17 Feb 2018

Kyle Shannon
Practical Programming
kyleshannon@boisestate.edu

* Introduction

What is a computer?

- Incredibly dumb machine that can add fast
- Consists of hardware that runs software
- Processor, Memory, Disks, Network etc.

What is programming?

- Asking a computer to do something many times for you in a special language and dialect

* Hardware

- Computers consist of a hierarchy of speedy things that move bits

- Processor -> series of caches -> memory -> disk/network

* Processor

- Processor can do a limited number of things to series of bits in it's registers
- MUL, ADD, SUB, DIV, MOD, CMP, etc.

* Caches

- The CPU(s) make assumptions about what memory you may access
- For example, memory near the address requested may be loaded into the cache(s)
- Cache misses may be expensive

* Memory (RAM)

- Intermediate storage arena for data
- Your script/program is loaded into memory for execution
- Data you generate and load from disk will be loaded as well

* Disks

- Long term storage
- Relatively slow
- SSDs are much faster than spinning disks

* Network

- Remote storage transferred over the wire
- Frequently web resources or network mounted storage (disk+network)

* Software

- Our access to the hardware

* Programming Languages: Which one should I use?

- Use whatever you want, provided it runs on multiple Operating Systems (OS)
- Some are domain specific (R->stats, Python->Bioinformatics)
- They all do the similar things at different levels of abstraction from the hardware
- Some are missing features, some allow you to do nearly everything

* Interpreted vs Compiled

* Interpreted Languages

- R, Python, Lua, etc.
- A program is loaded into memory, then interprets the script to the hardware via a compiled language
- Some _explicit_ operations may be slow, for example expensive `for` loops
- When given the opportunity, use _implicit_, or hidden functionality
- Ther is almost always an implicit version
- These are typically implemented in a compiled or byte-compiled language, sometimes tightly coupled with a given runtime
- Python -> C
- Lua -> C
- R -> C/C++
- Scala -> Java

* The C Programming Language

- Ubiquitous
- Maps closely to underlying hardware
- Gives insight to the machine as well as a language
- This is by design
- Underlying technology (with C++) for many languages
- A few examples: R, Python (CPython), Lua, Java JVM

* The Go Programming language

- Similar syntax (we'll use C-like syntax when optional, although it's not always 'right')
- Good tooling (like this slide show)
- Real time execution (next slide)
- Cross platform
- Concepts we are discussing are language agnostic

Follow along on the playground: http://play.golang.org

* Hello World

In C:

.code hello.c

In Go:

.play hello.go

* Program Structure

- Executables must have a single entry point (usually known as main)
- Import external modules or declarations
- Declare your functions
- Declare your data structures
- Declare your variables and constants
- Program!

* Basic and built-in data types

- Integers (8, 16, 32, and 64 bit, unsigned or signed, or arbitrary precision in many interpreted languages)
- Floating point numbers (32 and 64 bit)
- Strings (varies by language, usually built in)
- In C, strings are not built in, but arrays of `char` or bytes
- many interpreted languages, arbitrary precision is used

* Aggregate data types

- Arrays
- Structures and Classes

* Arrays

- Contiguous, addressable group of objects in order

 |-a[0]--|-a[1]--|-a[2]--|-a[3]--|-a[4]--|
 | | | | | | | | | | | | | | | | | | | | | | | | | |
  0       4       8       1       1       2       2
                          2       6       0       4
* Data Structures

- Maps/Hash tables/Dictionaries
- Lists (linked)
- Queues and Deques
- Stacks
- Sets
- Variable length arrays (vectors, slices, etc.)
- Others (R has many others, such as ???)

* Source Code Management

- Git
- SVN
- Mercurial
- Fossil
- Github/GitLab/BitBucket

* Debugging

- `printf()`
- IDEs (VS Code)
